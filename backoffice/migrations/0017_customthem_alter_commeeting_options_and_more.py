# Generated by Django 5.0.2 on 2024-10-30 09:48

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("admin_interface", "0032_alter_theme_options"),
        ("auth", "0016_alter_user_table"),
        ("backoffice", "0016_remove_profile_foreignerids_remove_profile_ids_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="CustomThem",
            fields=[],
            options={
                "verbose_name": "تم",
                "verbose_name_plural": "تمها",
                "db_table": "DJANGO_ADMIN_INTERFACE",
                "managed": False,
                "proxy": True,
            },
            bases=("admin_interface.theme",),
        ),
        migrations.AlterModelOptions(
            name="commeeting",
            options={
                "managed": False,
                "verbose_name": "جلسه",
                "verbose_name_plural": "جلسه ها",
            },
        ),
        migrations.AlterModelOptions(
            name="committee",
            options={
                "managed": False,
                "verbose_name": "کمیته",
                "verbose_name_plural": "کمیته ها",
            },
        ),
        migrations.AlterModelOptions(
            name="committeebranch",
            options={
                "managed": False,
                "verbose_name": "شعبه کمیته",
                "verbose_name_plural": "شعب کمیته ها",
            },
        ),
        migrations.AlterModelOptions(
            name="committeecalendar",
            options={
                "managed": False,
                "verbose_name": "تقویم کمیته ",
                "verbose_name_plural": "تقویم کمیته ها",
            },
        ),
        migrations.AlterModelOptions(
            name="committeesupportlocation",
            options={
                "managed": False,
                "verbose_name": "موقعیت مکانی کمیته",
                "verbose_name_plural": "موقعیت مکانی کمیته ها",
            },
        ),
        migrations.AlterModelOptions(
            name="committeetype",
            options={
                "managed": False,
                "verbose_name": "نوع کمیته",
                "verbose_name_plural": "انواع کمیته ها",
            },
        ),
        migrations.AlterModelOptions(
            name="complaint",
            options={
                "managed": False,
                "verbose_name": "شکایت",
                "verbose_name_plural": "شکایت ها",
            },
        ),
        migrations.AlterModelOptions(
            name="profile",
            options={
                "managed": False,
                "verbose_name": "پروفایل",
                "verbose_name_plural": "پروفایل",
            },
        ),
        migrations.AlterModelOptions(
            name="role",
            options={"managed": False},
        ),
        migrations.AlterModelOptions(
            name="zone",
            options={
                "managed": False,
                "verbose_name": "منطقه شهرداری",
                "verbose_name_plural": "مناطق شهرداری",
            },
        ),
        migrations.AlterModelTable(
            name="comcompromise",
            table="com_deceased",
        ),
        migrations.AlterModelTable(
            name="complaint",
            table="com_complaint",
        ),
        migrations.AlterModelTable(
            name="zone",
            table="zone",
        ),
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "province",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="backoffice.location",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
